// CODE_CHANGES = getGitChanges()
def gv

pipeline {
  
  agent any
//   environment {
//     NEW_VERSION = '1.3.0'
//   } setting up global environment variables

//   tools {
//     maven 'maven-3.9'
//   } // setting up build tools

  parameters {
    choice(name: 'VERSION', choices: ['1.1.0' , '1.2.0', '1.3.0'], description: '')
    booleanParam(name: 'executeTests', defaultValue: true, description: '')
  }

  stages {

      stage ("Init") {

            steps {
                script {
                    gv = load "script.groovy"
                }
            }
      }
      stage("build") {

            // when {
            //     BRANCH_NAME == "dev" && CODE_CHANGES == true
            // }
            steps {
                script {
                    gv.buildApp()
                }
            }
        
      }

       stage("test") {

            when {
                expression {
                    params.executeTests
                }
            }
            steps {
                script {
                    gv.testApp()
                }
            }
         
      }

       stage("deploy") {
            
            input {
                message "Select the environment to deploy to"
                ok "Done"
                parameters {
                    choice(name: 'ENV' , choices: ['dev', 'staging', 'prod'], description: '')
                }
            }
            steps {
                script {
                    gv.deployApp()
                    echo "Deploying to ${ENV}"
                }
                 withCredentials([usernamePassword(credentialsId: 'github-credentials', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                    echo "some script ${USERNAME} ${PASSWORD}"
                } 
            }
         
      }
  }

//   post {
//     always {
//         // will be executed no matter the outcome of stages
//     }
//     success {
//         // in case of success
//     }
//     failure {
//         //in case of failure
//     }
//   }
}
