pipeline {

    agent { label 'master' }
    
    environment {
        APP_PATH = "apps/hello-world"
        DOCKER_REGISTRY = "ghcr.io/dos11-onl"
        TAG = "latest"
    }
    
    stages {
        stage('Prepare') {
            steps {
                script {
                    println("BRANCH - ${BRANCH_NAME}")
                    println("PRID - ${env.CHANGE_ID}")
                    if (BRANCH_NAME == 'master') {
                        TAG = 'latest'
                    } else {
                        TAG = env.CHANGE_ID
                    }
                    IMAGE_NAME = "hello-world:${TAG}"
                    FINAL_IMAGE_NAME = "${DOCKER_REGISTRY}/hello-world:${TAG}"
                    CONTAINER_NAME = "hello"
                }
            }
        }

        stage('Build') {
            steps {
                dir(APP_PATH) {
                    sh "docker build -t ${IMAGE_NAME} -f Dockerfile ."
                }
            }
        }

        stage('Test') {
            steps {
                dir(APP_PATH) {
                    sh "docker run ${IMAGE_NAME} mvn test"
                }
            }

            // post {
            //     always {
            //         junit 'target/surefire-reports/*.xml'
            //     }
            // }
        }

        stage('Create image') {
            when { expression { BRANCH_NAME == 'master'}}
            steps {
                script {
                    dir(APP_PATH) {
                        sh"""
                        mkdir target
                        docker create --name ${CONTAINER_NAME} ${IMAGE_NAME}
                        docker cp ${CONTAINER_NAME}:/app/target/my-app-1.0-SNAPSHOT.jar target/
                        ls -la target/
                        docker rm -f ${CONTAINER_NAME}
                        docker build -t ${FINAL_IMAGE_NAME} -f Dockerfile-create .
                        """
                    }
                }
            }
        }

        stage('Push image') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'github_registry', passwordVariable: 'pass', usernameVariable: 'user')]) {
                    sh "echo ${pass} | docker login ghcr.io -u ${user} --password-stdin"
                    sh "docker push ${FINAL_IMAGE_NAME}"
                }
            }
        }
    }

    post { 
        always { 
            cleanWs()
        }
    }
}
