import dotenv from 'dotenv';
import fs from 'fs';
import logger from './logger';

if (fs.existsSync('.env')) {
    logger.debug('Using .env file to supply config environment variables');
    dotenv.config();
} else {
    logger.debug('Using .env.example file to supply config environment variables');
    dotenv.config({ path: '.env.example' });  // you can delete this after you create your own .env file!
}

export const sessionTime = (+process.env.SESSION_TIME || 30) * 60;

export const PROD = process.env.NODE_ENV === 'production'; // Anything else is treated as 'dev'

export const DATABASE_URI = process.env.DATABASE_URI;

export const JWT_SECRET = process.env.JWT_SECRET;
export const FROM_EMAIL = process.env.FROM_EMAIL || 'development@eonhealth.com';

export const slack = {
    submissionErrorsURL: process.env.SLACK_SUBMISSION_ERRORS_URL,
};

export const AWS_REGION = process.env.AWS_REGION || 'us-west-2';

export const S3_EXPORT_BUCKET = process.env.S3_EXPORT_BUCKET || 'epm-dev-bucket';
export const S3_IMAGE_BUCKET = process.env.S3_IMAGE_BUCKET || 'lungdirect-images-files';
export const S3_FILES_BUCKET = process.env.S3_FILES_BUCKET || 'epm-dev-bucket';

export const ED_DAILY_REPORT = (process.env.ED_DAILY_REPORT || 'false').toLowerCase() === 'true';

export const intercomSecretKey = '9x7xp8GfaIyZz-ymFWqnkNGFgEak5d-KnDdJ2hsL';

export const npiESBaseurl = 'https://b6z5vwze34.execute-api.us-west-1.amazonaws.com/prod/NPI?api_key=occnS5MovC20xd9blQr2daY6SYzZYF5KamNl4vIb';
export const npiESApiKey = 'occnS5MovC20xd9blQr2daY6SYzZYF5KamNl4vIb';

// for Audit logs
export const AUDIT_LOGS_ENABLED = (process.env.AUDIT_LOGS_ENABLED || 'true').toLowerCase() === 'true';
export const ES_URL = process.env.ES_URL;
export const ES_INDEX = process.env.ES_INDEX;

export const CLIENT_REGISTRATION = process.env.CLIENT_REGISTRATION;

if (!DATABASE_URI) {
    logger.error('No database connection string. Set DATABASE_URI environment variable.');
    process.exit(1);
}

if (!JWT_SECRET) {
    logger.error('No jwt secret. Set JWT_SECRET environment variable.');
    process.exit(1);
}
// acr secrets
export const acr = {
  authorizationURL: process.env.ACR_AUTH_URL || 'https://sso.acr.org/oauth2/default/v1/authorize',
  tokenHost: process.env.ACR_TOKEN_HOST || 'sso.acr.org',
  tokenURL: process.env.ACR_TOKEN_URL || 'https://sso.acr.org/oauth2/default/v1/token',
  submissionURL: process.env.LCSR_SUB_URL || 'https://nrdr9x.acr.org/NonPQRSapi/lcsr/transactions',
};

// for essential patients

export const READ_REPLICA_NAME = process.env.READ_REPLICA_NAME;

// for sso
export const SSO_ENABLED = (process.env.SSO_ENABLED && process.env.SSO_ENABLED !== 'false') ? process.env.SSO_ENABLED : false;
export const SSO_ISSUER = process.env.SSO_ISSUER || 'eonhealth';
export const SSO_ENTRY_POINT = process.env.SSO_ENTRY_POINT;
export const SSO_IDENTIFIER_FORMAT = process.env.SSO_IDENTIFIER_FORMAT || 'urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified';
export const SSO_LOGOUT_URL = process.env.SSO_LOGOUT_URL;
export const SSO_SIGNATURE_ALGORITHM = process.env.SSO_SIGNATURE_ALGORITHM || 'sha256';
export const SSO_CERTIFICATE = process.env.SSO_CERT || undefined;
export const SSO_PRIVATE_CERTIFICATE = process.env.SSO_PRIVATE_CERT || undefined;
export const SSO_CLOCK_SKEW_MS = +process.env.SSO_CLOCK_SKEW_MS || undefined;

// for user login policy
export const MAX_INCORRECT_PASSWORD_ATTEMPTS = +process.env.MAX_INCORRECT_PASSWORD_ATTEMPTS || 5;
export const INCORRECT_PASSWORD_ATTEMPTS_DURATION = +process.env.INCORRECT_PASSWORD_ATTEMPTS_DURATION || 5;
export const PASSWORD_RETENTION_DAYS = +process.env.PASSWORD_RETENTION_DAYS || 90;
export const USER_INACTIVITY_SUSPENSION_DAYS = +process.env.USER_INACTIVITY_SUSPENSION_DAYS || 90;
export const PASSWORD_CHANGE_PRIOR_CHECK_COUNT = +process.env.PASSWORD_CHANGE_PRIOR_CHECK_COUNT || 3;

// for cognito login aws
export const COGNITO_SECRET = process.env.COGNITO_SECRET;
export const COGNITO_ID = process.env.COGNITO_ID;

// comg api url
export const EHR_EPIC_API_URL =  process.env.EHR_EPIC_API_URL;
slackKEy=daEAdadaFEW@EQWRWADaE

//FHIR config
export const SEND_DATA_TO_FHIR = process.env.SEND_DATA_TO_FHIR || 'false';
export const FHIR_SQS_QUEUE_URL = process.env.FHIR_SQS_QUEUE_URL;

export const EXPIRY_AUTH_SECONDS = +process.env.EXPIRY_AUTH_SECONDS || 3600;

//POOL SETTING
export const DASHBOARD_MAX_POOL = +process.env.DASHBOARD_MAX_POOL || 5;
export const INCOMING_MAX_POOL = +process.env.INCOMING_MAX_POOL || 5;
export const INCOMING_MIN_POOL = +process.env.INCOMING_MIN_POOL || 1;
