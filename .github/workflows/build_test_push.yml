name: Main Pipeline

on:
  workflow_dispatch:
  pull_request:
    branches:
      - master
    types:
      - closed
  repository_dispatch:
    types: [ deploy ]

jobs:
  build-jar:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      
      - name: Set up JDK 11
        uses: actions/setup-java@v4
        with:
          java-version: '11'
          distribution: 'adopt'

      - name: Build with Maven
        run: mvn -B clean package

      - name: Extract version from POM
        id: extract-version
        run: |
          VERSION=$(grep -m1 '<version>' pom.xml | sed -E 's/.*>([0-9]+\.[0-9]+\.[0-9]+)<.*/\1/')
          echo "Version from POM: $VERSION"
          echo "::set-output name=version::$VERSION"

      - name: Increment version
        run: |
          if [[ ${{ github.event.pull_request.title }} == *"hotfix"* ]]; then
            mvn versions:set -DnewVersion=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout | awk -F. '{$(NF) = $(NF) + 1;} 1' | sed 's/ /./g')
          else
            mvn versions:set -DnewVersion=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout | awk -F. '{$(NF-1) = $(NF-1) + 1;} 1' | sed 's/ /./g')
          fi

      - name: Commit version change
        uses: EndBug/add-and-commit@v9
        with:
          author_name: "GitHub Action"
          message: "Increment version"

      - name: Tag commit with version
        run: |
          VERSION=$(echo "${{ steps.extract-version.outputs.version }}")
          git tag -a v$VERSION -m "Version $VERSION"
          git push --follow-tags

  build-push-deploy-docker:
    if: github.event.pull_request.merged == true
    needs: build-jar
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract version from POM
        id: extract-version
        run: |
          VERSION=$(grep -m1 '<version>' pom.xml | sed -E 's/.*>([0-9]+\.[0-9]+\.[0-9]+)<.*/\1/')
          echo "Version from POM: $VERSION"
          echo "::set-output name=version::$VERSION"

      - name: Install Notary
        run: sudo apt install notary

      - name: Import Docker Content Trust Keys
        run: |
          echo "${{ secrets.DOCKER_CONTENT_TRUST_ROOT_KEY }}" > root-key.pem
          echo "${{ secrets.DOCKER_CONTENT_TRUST_REPO_KEY }}" > repo-key.pem
          notary -d ~/.docker/trust key import root-key.pem --role root
          notary -d ~/.docker/trust key import repo-key.pem --role targets
          rm root-key.pem repo-key.pem

      - name: Enable Docker Content Trust and Push Image
        run: |
          export DOCKER_CONTENT_TRUST=1
          export DOCKER_CONTENT_TRUST_REPOSITORY_PASSPHRASE=${{ secrets.DOCKER_CONTENT_TRUST_REPOSITORY_PASSPHRASE }}
          export DOCKER_CONTENT_TRUST_ROOT_PASSPHRASE=${{ secrets.DOCKER_CONTENT_TRUST_ROOT_PASSPHRASE }}
          echo "Docker Content Trust Enabled"
          docker push yossizxc/java:my-app-${{ steps.extract-version.outputs.version }}

      - name: Verify Docker Image
        run: |
          docker trust inspect --pretty yossizxc/java:my-app-${{ steps.extract-version.outputs.version }}

      # - name: Build and push
      #   uses: docker/build-push-action@v4
      #   with:
      #     push: true
      #     tags: yossizxc/java:my-app-${{ steps.extract-version.outputs.version }}

      - name: Trigger Deploy EKS action
        uses: peter-evans/repository-dispatch@v1
        with:
          token: ${{ secrets.REPO_ACCESS_TOKEN }}
          event-type: deploy_eks

#Deployment on ec2 instance.
# need to add step if pipeline fails to decrement the version back, for example undo last commit.


#      - name: Configure AWS credentials
#        uses: aws-actions/configure-aws-credentials@v1
#        with:
#          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#
#          aws-region: eu-west-3
#      - name: Get EC2 instance ID using tags
#        id: get-instance-id
#        run: |
#          instance_id=$(aws ec2 describe-instances \
#          --filters "Name=tag:Name,Values=production" "Name=instance-state-name,Values=running" \
#          --query 'Reservations[].Instances[].InstanceId' --output text)
#          echo "::set-output name=instance_id::$instance_id"
#
#      - name: Run commands on EC2 instance using AWS SSM Session Manager
#        run: |
#          aws ssm start-session \
#            --target "${{ steps.get-instance-id.outputs.instance_id }}" \
#            --document-name AWS-StartInteractiveCommand \
#            --parameters "command='sudo docker system prune -af && \
#                                   sudo docker pull yossizxc/java:my-app-${{ steps.extract-version.outputs.version }} && \
#                                   sudo docker run -d --name my-app yossizxc/java:my-app-${{ steps.extract-version.outputs.version }}'"
