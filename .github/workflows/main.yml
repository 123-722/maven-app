name: Main Pipeline

on:
  pull_request:
    branches:
      - master
    types:
      - closed

jobs:
  build-jar:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 11
        uses: actions/setup-java@v4
        with:
          java-version: '11'
          distribution: 'adopt'

      - name: Build with Maven
        run: mvn -B clean package

      - name: Increment version
        run: |
          if [[ ${{ github.event.pull_request.title }} == *"hotfix"* ]]; then
            mvn versions:set -DnewVersion=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout | awk -F. '{$(NF) = $(NF) + 1;} 1' | sed 's/ /./g')
          else
            mvn versions:set -DnewVersion=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout | awk -F. '{$(NF-1) = $(NF-1) + 1;} 1' | sed 's/ /./g')
          fi

      - name: Extract version from POM
        run: |
          VERSION=$(grep -m1 '<version>' pom.xml | sed -E 's/.*>([0-9]+\.[0-9]+\.[0-9]+)<.*/\1/')
          echo "Version from POM: $VERSION"
          echo "::set-output name=version::$VERSION"

      - name: Commit version change
        uses: EndBug/add-and-commit@v9
        with:
          author_name: "GitHub Action"
          message: "Increment version"

      - name: Tag commit with version
        run: |
          VERSION=$(echo "${{ steps.extract-version.outputs.version }}")
          git tag -a v$VERSION -m "Version $VERSION"
          git push --follow-tags

  build-push-deploy-docker:
    if: github.event.pull_request.merged == true
    needs: build-jar
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          push: true
          tags: yossizxc/java:my-app-${{ needs.build-jar.outputs.version }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-3

      - name: Get EC2 instance ID using tags
        id: get-instance-id
        run: |
          instance_id=$(aws ec2 describe-instances \
          --filters "Name=tag:Name,Values=production" "Name=instance-state-name,Values=running" \
          --query 'Reservations[].Instances[].InstanceId' --output text)
          echo "::set-output name=instance_id::$instance_id"

      - name: Run commands on EC2 instance using AWS SSM Session Manager
        run: |
          aws ssm start-session \
            --target "${{ steps.get-instance-id.outputs.instance_id }}" \
            --document-name AWS-StartInteractiveCommand \
            --parameters "command='sudo docker system prune -af && \
                                   sudo docker pull yossizxc/java:my-app && \
                                   sudo docker run -d --name my-app yossizxc/java:my-app'"
