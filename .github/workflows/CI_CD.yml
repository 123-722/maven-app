name: CI_CD_Pipeline_Using_GitHub_Actions
on:
  push:
    branches:
      - master
      - feature/*

env: 
  IMAGE_NAME: "romi293/java_github_actions:latest"

jobs:

  versioning:
    runs-on: ubuntu-latest

    env: 
      CURRENT_VERSION: "1.0.0"
      VERSION_TYPE: ""

    steps:
      - name: Determine Version Type
        id: version
        run: |
          # Extract commit message from the latest commit
          COMMIT_MESSAGE="ddd"
          # echo "COMMIT_MESSAGE=$(git log -1 --pretty=format:%s) >> $GITHUB_ENV
          echo "Commit Message: $COMMIT_MESSAGE"
          
          # Determine version type based on commit message
          if [[ $COMMIT_MESSAGE == *"feature"* ]]; then
            echo "::set-output name=version_type::minor"
          elif [[ $COMMIT_MESSAGE == *"fix"* || $COMMIT_MESSAGE == *"bug"* ]]; then
            echo "::set-output name=version_type::patch"
          else
            echo "::set-output name=version_type::major"
          fi
    
      - name: Use Version Type
        run: |
          echo "VERSION_TYPE=${{ steps.version.outputs.version_type }}" >> $GITHUB_ENV
          echo Version Type: $VERSION_TYPE
          
          if [[ "$VERSION_TYPE" == "major" ]]; then
            echo "Incrementing MAJOR version"
          elif [[ "$VERSION_TYPE" == "minor" ]]; then
            echo "Incrementing MINOR version"
          else
            echo "Incrementing PATCH version"
          fi

      - name: Increament
        run: |
          case $VERSION_TYPE in
          "major")
            NEW_VERSION=$(echo $CURRENT_VERSION | awk -F. -v OFS=. '{$1++; print}')
            ;;
          "minor")
            NEW_VERSION=$(echo $CURRENT_VERSION | awk -F. -v OFS=. '{$2++; print}')
            ;;
          "patch")
            NEW_VERSION=$(echo $CURRENT_VERSION | awk -F. -v OFS=. '{$3++; print}')
            ;;
          *)
            echo BLABLABLABLA $VERSION_TYPE
            echo "Invalid version type"
            exit 1
            ;;
          esac
          echo "New Version: $NEW_VERSION"

########################################################
  
  build:
    runs-on: ubuntu-latest

    env:
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Build Docker Image
        run: |
          docker build -t $IMAGE_NAME .

      - name: Publish to DockerHub
        run: |
          echo $DOCKERHUB_TOKEN  | docker login -u $DOCKERHUB_USERNAME --password-stdin
          docker tag $IMAGE_NAME $IMAGE_NAME
          docker push $IMAGE_NAME
  
########################################################

  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Pull image from DockerHub
        run: docker pull $IMAGE_NAME

      - name: Start Docker container
        run: docker run -d -p 8080:80 --name maven-app $IMAGE_NAME

      - name: Check if container is running
        run: docker ps -a | grep maven-app
      
      - name: Display Docker container logs
        run: docker logs maven-app

########################################################

  provision-ec2:
    runs-on: ubuntu-latest

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
              aws-access-key-id: ${{ secrets.TF_USER_AWS_KEY }}
              aws-secret-access-key: ${{ secrets.TF_USER_AWS_SECRET }}
              aws-region: us-east-1

      # - name: Setup Terraform
      #   uses: hashicorp/setup-terraform@v2

      # - name: Terraform apply
      #   id: apply
      #   run: | 
      #     terraform init TF_create_EC2_instance/.
      #     terraform validate .
      #     terraform plan .
      #     terraform apply -auto-approve .


########################################################

  # update_version:
  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: Increase jar patch version
  #       id: version
  #       run: |
  #         echo VERSION: $(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
  #         #cd ../../.././
  #         # mvn versions:set -DnewVersion=1.0.$(($(mvn help:evaluate -Dexpression=project.version -q -DforceStdout | 
  #         # awk -F '.' '{print $3}')+1)) -DgenerateBackupPoms=false
  #         # echo blabla
  #         echo NEW VERSION: $(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          
  #     - name: Increment Version
  #       run: | 
  #         mvn versions:set -DnewVersion=1.0.$(($(mvn help:evaluate -Dexpression=project.version -q -DforceStdout |
  #         awk -F '.' '{print $3}')+1)) -DgenerateBackupPoms=false  
  #         echo NEW VERSION: $(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)

  
        # mvn -B versions:set -DnewVersion=${{ github.event.release.tag_name }} -DgenerateBackupPoms=false
